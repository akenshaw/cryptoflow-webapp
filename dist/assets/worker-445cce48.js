(function(){"use strict";console.log("worker_v0.1.3-alpha");class _{constructor(e,r){this.order_book=this.initialize_order_book(e,r)}initialize_order_book(e,r){let s=e.map(a=>a.map(Number)),t=r.map(a=>a.map(Number));return{bids:s,asks:t}}async refresh_order_book(e){g=e;let r=new AbortController,s=setInterval(async()=>{if(!u||e!==g)clearInterval(s),r.abort();else{r=new AbortController;try{let t=await b(e,{signal:r.signal});this.order_book=this.initialize_order_book(t.bids,t.asks)}catch(t){t.name==="AbortError"?console.log("Fetch operation aborted"):console.error("Error fetching order book:",t)}}},6e3)}async update_order_book(e,r){let s=e.map(a=>a.map(Number)),t=r.map(a=>a.map(Number));[this.order_book.bids,this.order_book.asks]=await this.prepare_order_book(this.order_book.bids,this.order_book.asks,s,t)}async prepare_order_book(e,r,s,t){try{const a=new Map([...e,...s].filter(n=>n[0]>=e[e.length-1][0])),E=new Map([...r,...t].filter(n=>n[0]<=r[r.length-1][0]));return e=Array.from(a.entries()).filter(n=>n[1]!==0).sort((n,k)=>k[0]-n[0]),r=Array.from(E.entries()).filter(n=>n[1]!==0).sort((n,k)=>n[0]-k[0]),[e,r]}catch(a){return console.error("Error preparing order book:",a),[s,t]}}}let i,p=[],g,l,f=!0,u=!0,c,d;self.onmessage=o=>{o.data.type==="createWebSocket"&&h(o.data.symbol),o.data.type==="terminateWebsocket"&&(console.log("worker.js: Terminating websocket connection..."),i.close(),v())};function h(o){i&&i.readyState===1&&(console.log("worker.js: Closing existing websocket connection for symbol:",l.toUpperCase()),i.close(),self.postMessage({type:0}),f=!0,d=null,p=[]),console.log("worker.js: Creating websocket connection for symbol:",o),l=o.toLowerCase(),b(l).then(e=>{i=new WebSocket(`wss://fstream.binance.com/stream?streams=${l}@aggTrade/${l}@depth@100ms`),y(i),c=e.lastUpdateId,d=new _(e.bids,e.asks)}).catch(e=>{console.error("Error initializing the order book:",e)})}function y(o){o.addEventListener("open",()=>{d.refresh_order_book(l),self.postMessage({type:1})}),o.addEventListener("close",()=>{console.log("worker.js: WebSocket connection closed")});let e=!1;o.addEventListener("message",async r=>{let s=JSON.parse(r.data);if(s.stream.endsWith("@aggTrade")){let t=s.data;p.push({x:t.T,y:parseFloat(t.p),r:parseFloat(t.q),m:t.m})}else if(s.stream.endsWith("@depth@100ms")){if(e){console.log("isHandlingDepth:",e);return}e=!0,await w(s.data),e=!1}})}async function w(o){let e=o.u,r=o.U,s=o.pu;if(!(e<c)){if(f)if(r<=c&&c<=e)console.log("First processed event succeed."),f=!1;else{await m();return}else if(s!=c){await m();return}await d.update_order_book(o.b,o.a),c=e,self.postMessage({type:"u",depth:d.order_book,tradesBuffer:p,update_time:o.E}),p=[]}}async function m(){console.log("Out of sync, reinitializing order book...");const o=await b(l);c=o.lastUpdateId,d.order_book=d.initialize_order_book(o.bids,o.asks),p=[]}async function b(o){return await(await fetch(`https://fapi.binance.com/fapi/v1/depth?symbol=${o}&limit=500`)).json()}function v(){i?(i.close(),u=!1,self.postMessage({type:"x",message:"OK"})):(console.log("worker.js: No websocket connection to terminate."),self.postMessage({type:"x",message:"ERR: No websocket connection to terminate."}))}})();
