(function(){"use strict";console.log("worker_v0.1.3-alpha");class h{constructor(e,s){this.order_book=this.initialize_order_book(e,s)}initialize_order_book(e,s){let a=e.map(n=>n.map(Number)),t=s.map(n=>n.map(Number));return{bids:a,asks:t}}async refresh_order_book(e){g=e;let s=new AbortController,a=setInterval(async()=>{if(!_||e!==g)clearInterval(a),s.abort();else{s=new AbortController;try{let t=await k(e,{signal:s.signal});this.order_book=this.initialize_order_book(t.bids,t.asks)}catch(t){t.name==="AbortError"?console.log("Fetch operation aborted"):console.error("Error fetching order book:",t)}}},6e3)}async update_order_book(e,s){let a=e.map(n=>n.map(Number)),t=s.map(n=>n.map(Number));[this.order_book.bids,this.order_book.asks]=await this.prepare_order_book(this.order_book.bids,this.order_book.asks,a,t)}async prepare_order_book(e,s,a,t){try{const n=new Map(e),f=new Map(s);a.forEach(r=>{n.has(r[0]),n.set(r[0],r[1])}),t.forEach(r=>{f.has(r[0]),f.set(r[0],r[1])});let M=Array.from(n.entries()).filter(r=>r[1]!==0).sort((r,u)=>u[0]-r[0]),I=Array.from(f.entries()).filter(r=>r[1]!==0).sort((r,u)=>r[0]-u[0]);return[M,I]}catch(n){return console.error("Error preparing order book:",n),[a,t]}}}let i,p=[],g,l,b=!0,_=!0,c,d;self.onmessage=o=>{o.data.type==="createWebSocket"&&y(o.data.symbol),o.data.type==="terminateWebsocket"&&(console.log("worker.js: Terminating websocket connection..."),i.close(),v())};function y(o){i&&i.readyState===1&&(console.log("worker.js: Closing existing websocket connection for symbol:",l.toUpperCase()),i.close(),self.postMessage({type:0}),b=!0,d=null,p=[]),console.log("worker.js: Creating websocket connection for symbol:",o),l=o.toLowerCase(),k(l).then(e=>{i=new WebSocket(`wss://fstream.binance.com/stream?streams=${l}@aggTrade/${l}@depth@100ms`),w(i),c=e.lastUpdateId,d=new h(e.bids,e.asks)}).catch(e=>{console.error("Error initializing the order book:",e)})}function w(o){o.addEventListener("open",()=>{d.refresh_order_book(l),self.postMessage({type:1})}),o.addEventListener("close",()=>{console.log("worker.js: WebSocket connection closed")});let e=!1;o.addEventListener("message",async s=>{let a=JSON.parse(s.data);if(a.stream.endsWith("@aggTrade")){let t=a.data;p.push({x:t.T,y:parseFloat(t.p),r:parseFloat(t.q),m:t.m})}else if(a.stream.endsWith("@depth@100ms")){if(e){console.log("isHandlingDepth:",e);return}e=!0,await E(a.data),e=!1}})}async function E(o){let e=o.u,s=o.U,a=o.pu;if(!(e<c)){if(b)if(s<=c&&c<=e)console.log("First processed event succeed."),b=!1;else{await m();return}else if(a!=c){await m();return}await d.update_order_book(o.b,o.a),c=e,self.postMessage({type:"u",depth:d.order_book,tradesBuffer:p,update_time:o.E}),p=[]}}async function m(){console.log("Out of sync, reinitializing order book...");const o=await k(l);c=o.lastUpdateId,d.order_book=d.initialize_order_book(o.bids,o.asks),p=[]}async function k(o){return await(await fetch(`https://fapi.binance.com/fapi/v1/depth?symbol=${o}&limit=500`)).json()}function v(){i?(i.close(),_=!1,self.postMessage({type:"x",message:"OK"})):(console.log("worker.js: No websocket connection to terminate."),self.postMessage({type:"x",message:"ERR: No websocket connection to terminate."}))}})();
