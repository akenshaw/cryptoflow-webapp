(function(){"use strict";class k{constructor(e,o){this.order_book=this.initialize_order_book(e,o)}initialize_order_book(e,o){let s=e.map(n=>n.map(Number)),a=o.map(n=>n.map(Number));return{bids:s,asks:a}}async refresh_order_book(e){_=e;let o=new AbortController,s=setInterval(async()=>{if(!m||e!==_)clearInterval(s),o.abort();else{o=new AbortController;try{let a=await h(e,{signal:o.signal});this.order_book=this.initialize_order_book(a.bids,a.asks)}catch(a){a.name==="AbortError"?console.log("Fetch operation aborted"):console.error("Error fetching order book:",a)}}},5e3)}async update_order_book(e,o){let s=e.map(n=>n.map(Number)),a=o.map(n=>n.map(Number));[this.order_book.bids,this.order_book.asks]=await this.prepare_order_book(this.order_book.bids,this.order_book.asks,s,a)}async prepare_order_book(e,o,s,a){s=s.filter(t=>t[0]>=e[e.length-1][0]),a=a.filter(t=>t[0]<=o[o.length-1][0]);const n=new Map(s.map(t=>[t[0],t[1]])),g=new Map(a.map(t=>[t[0],t[1]]));return e=e.map(t=>[t[0],n.has(t[0])?n.get(t[0]):t[1]]),o=o.map(t=>[t[0],g.has(t[0])?g.get(t[0]):t[1]]),e=e.concat([...n.entries()].filter(([t,p])=>!e.some(u=>u[0]===t))),o=o.concat([...g.entries()].filter(([t,p])=>!o.some(u=>u[0]===t))),e=e.filter(t=>t[1]!==0).sort((t,p)=>p[0]-t[0]),o=o.filter(t=>t[1]!==0).sort((t,p)=>t[0]-p[0]),[e,o]}}let i,f=[],_,l,b=!0,m=!0,c,d;self.onmessage=r=>{r.data.type==="createWebSocket"&&y(r.data.symbol),r.data.type==="terminateWebsocket"&&(console.log("worker.js: Terminating websocket connection..."),i.close(),E())};function y(r){i&&i.readyState===1&&(console.log("worker.js: Closing existing websocket connection for symbol:",l.toUpperCase()),i.close(),self.postMessage({type:0}),b=!0,d=null,f=[]),console.log("worker.js: Creating websocket connection for symbol:",r),l=r.toLowerCase(),h(l).then(e=>{i=new WebSocket(`wss://fstream.binance.com/stream?streams=${l}@aggTrade/${l}@depth@100ms`),w(i),c=e.lastUpdateId,d=new k(e.bids,e.asks)}).catch(e=>{console.error("Error initializing the order book:",e)})}function w(r){r.addEventListener("open",()=>{self.postMessage({type:1}),d.refresh_order_book(l)}),r.addEventListener("close",()=>{console.log("worker.js: WebSocket connection closed")});let e=!1;r.addEventListener("message",async o=>{let s=JSON.parse(o.data);if(s.stream.endsWith("@aggTrade")){let a=s.data;f.push({x:a.T,y:parseFloat(a.p),r:parseFloat(a.q),m:a.m})}else if(s.stream.endsWith("@depth@100ms")){if(e){console.log("isHandlingDepth:",e);return}e=!0,await v(s.data),e=!1}})}async function v(r){let e=r.u,o=r.U,s=r.pu;if(!(e<c)){if(b)if(o<=c&&c<=e)console.log("First processed event succeed."),b=!1;else{console.log("Out of sync at the first event, reinitializing order book..."),depth_snapshot=await h(l),c=depth_snapshot.lastUpdateId,await d.update_order_book(depth_snapshot.bids,depth_snapshot.asks);return}else if(s!=c){console.log("Out of sync, reinitializing order book..."),depth_snapshot=await h(l),c=depth_snapshot.lastUpdateId,await d.update_order_book(depth_snapshot.bids,depth_snapshot.asks);return}d.update_order_book(r.b,r.a),c=e,self.postMessage({type:"u",depth:d.order_book,tradesBuffer:f,update_time:r.E}),f=[]}}async function h(r){return await(await fetch(`https://fapi.binance.com/fapi/v1/depth?symbol=${r}&limit=500`)).json()}function E(){i?(i.close(),m=!1,self.postMessage({type:"x",message:"OK"})):(console.log("worker.js: No websocket connection to terminate."),self.postMessage({type:"x",message:"ERR: No websocket connection to terminate."}))}})();
